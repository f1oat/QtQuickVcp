/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#include "statusbase.h"
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace application {

/** Generic Status Base implementation */
StatusBase::StatusBase(QObject *parent) :
    QObject(parent),
    QQmlParserStatus(),
    m_componentCompleted(false),
    m_ready(false),
    m_debugName("Status Base"),
    m_statusChannel(nullptr),
    m_state(Down),
    m_previousState(Down),
    m_fsm(nullptr),
    m_errorString("")
{
    // initialize status channel
    m_statusChannel = new application::StatusSubscribe(this);
    m_statusChannel->setDebugName(m_debugName + " - status");
    connect(m_statusChannel, &application::StatusSubscribe::socketUriChanged,
            this, &StatusBase::statusUriChanged);
    connect(m_statusChannel, &application::StatusSubscribe::stateChanged,
            this, &StatusBase::statusChannelStateChanged);
    connect(m_statusChannel, &application::StatusSubscribe::socketMessageReceived,
            this, &StatusBase::processStatusChannelMessage);

    connect(m_statusChannel, &application::StatusSubscribe::heartbeatIntervalChanged,
            this, &StatusBase::statusHeartbeatIntervalChanged);

    m_fsm = new QStateMachine(this);
    QState *downState = new QState(m_fsm);
    connect(downState, &QState::entered, this, &StatusBase::fsmDownEntered, Qt::QueuedConnection);
    QState *tryingState = new QState(m_fsm);
    connect(tryingState, &QState::entered, this, &StatusBase::fsmTryingEntered, Qt::QueuedConnection);
    QState *syncingState = new QState(m_fsm);
    connect(syncingState, &QState::entered, this, &StatusBase::fsmSyncingEntered, Qt::QueuedConnection);
    QState *upState = new QState(m_fsm);
    connect(upState, &QState::entered, this, &StatusBase::fsmUpEntered, Qt::QueuedConnection);
    connect(upState, &QState::entered, this, &StatusBase::syncStatus, Qt::QueuedConnection);
    connect(upState, &QState::exited, this, &StatusBase::unsyncStatus, Qt::QueuedConnection);
    m_fsm->setInitialState(downState);
    m_fsm->start();

    connect(this, &StatusBase::fsmDownConnect,
            this, &StatusBase::fsmDownConnectQueued, Qt::QueuedConnection);
    downState->addTransition(this, &StatusBase::fsmDownConnectQueued, tryingState);
    connect(this, &StatusBase::fsmTryingStatusUp,
            this, &StatusBase::fsmTryingStatusUpQueued, Qt::QueuedConnection);
    tryingState->addTransition(this, &StatusBase::fsmTryingStatusUpQueued, syncingState);
    connect(this, &StatusBase::fsmTryingDisconnect,
            this, &StatusBase::fsmTryingDisconnectQueued, Qt::QueuedConnection);
    tryingState->addTransition(this, &StatusBase::fsmTryingDisconnectQueued, downState);
    connect(this, &StatusBase::fsmSyncingChannelsSynced,
            this, &StatusBase::fsmSyncingChannelsSyncedQueued, Qt::QueuedConnection);
    syncingState->addTransition(this, &StatusBase::fsmSyncingChannelsSyncedQueued, upState);
    connect(this, &StatusBase::fsmSyncingStatusTrying,
            this, &StatusBase::fsmSyncingStatusTryingQueued, Qt::QueuedConnection);
    syncingState->addTransition(this, &StatusBase::fsmSyncingStatusTryingQueued, tryingState);
    connect(this, &StatusBase::fsmSyncingDisconnect,
            this, &StatusBase::fsmSyncingDisconnectQueued, Qt::QueuedConnection);
    syncingState->addTransition(this, &StatusBase::fsmSyncingDisconnectQueued, downState);
    connect(this, &StatusBase::fsmUpStatusTrying,
            this, &StatusBase::fsmUpStatusTryingQueued, Qt::QueuedConnection);
    upState->addTransition(this, &StatusBase::fsmUpStatusTryingQueued, tryingState);
    connect(this, &StatusBase::fsmUpDisconnect,
            this, &StatusBase::fsmUpDisconnectQueued, Qt::QueuedConnection);
    upState->addTransition(this, &StatusBase::fsmUpDisconnectQueued, downState);

    connect(this, &StatusBase::fsmDownConnect,
            this, &StatusBase::fsmDownConnectEvent, Qt::QueuedConnection);
    connect(this, &StatusBase::fsmTryingStatusUp,
            this, &StatusBase::fsmTryingStatusUpEvent, Qt::QueuedConnection);
    connect(this, &StatusBase::fsmTryingDisconnect,
            this, &StatusBase::fsmTryingDisconnectEvent, Qt::QueuedConnection);
    connect(this, &StatusBase::fsmSyncingChannelsSynced,
            this, &StatusBase::fsmSyncingChannelsSyncedEvent, Qt::QueuedConnection);
    connect(this, &StatusBase::fsmSyncingStatusTrying,
            this, &StatusBase::fsmSyncingStatusTryingEvent, Qt::QueuedConnection);
    connect(this, &StatusBase::fsmSyncingDisconnect,
            this, &StatusBase::fsmSyncingDisconnectEvent, Qt::QueuedConnection);
    connect(this, &StatusBase::fsmUpStatusTrying,
            this, &StatusBase::fsmUpStatusTryingEvent, Qt::QueuedConnection);
    connect(this, &StatusBase::fsmUpDisconnect,
            this, &StatusBase::fsmUpDisconnectEvent, Qt::QueuedConnection);

     connect(this, &StatusBase::startSignal,
             this, &StatusBase::startSlot, Qt::QueuedConnection);
     connect(this, &StatusBase::stopSignal,
             this, &StatusBase::stopSlot, Qt::QueuedConnection);
     connect(this, &StatusBase::channelsSyncedSignal,
             this, &StatusBase::channelsSyncedSlot, Qt::QueuedConnection);
}

StatusBase::~StatusBase()
{
}

/** Add a topic that should be subscribed **/
void StatusBase::addStatusTopic(const QString &name)
{
    m_statusChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void StatusBase::removeStatusTopic(const QString &name)
{
    m_statusChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void StatusBase::clearStatusTopics()
{
    m_statusChannel->clearSocketTopics();
}

void StatusBase::startStatusChannel()
{
    m_statusChannel->setReady(true);
}

void StatusBase::stopStatusChannel()
{
    m_statusChannel->setReady(false);
}

/** Processes all message received on status */
void StatusBase::processStatusChannelMessage(const QByteArray &topic, const pb::Container &rx)
{

    // react to emcstat full update message
    if (rx.type() == pb::MT_EMCSTAT_FULL_UPDATE)
    {
        emcstatFullUpdateReceived(topic, rx);
    }

    // react to emcstat incremental update message
    if (rx.type() == pb::MT_EMCSTAT_INCREMENTAL_UPDATE)
    {
        emcstatIncrementalUpdateReceived(topic, rx);
    }

    emit statusMessageReceived(topic, rx);
}

void StatusBase::fsmDownEntered()
{
    if (m_previousState != Down)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
        m_previousState = Down;
        emit stateChanged(m_state);
    }
}

void StatusBase::fsmDownConnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif

    m_state = Trying;
    updateTopics();
    startStatusChannel();
}

void StatusBase::fsmTryingEntered()
{
    if (m_previousState != Trying)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
        m_previousState = Trying;
        emit stateChanged(m_state);
    }
}

void StatusBase::fsmTryingStatusUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event STATUS UP");
#endif

    m_state = Syncing;
}

void StatusBase::fsmTryingDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopStatusChannel();
}

void StatusBase::fsmSyncingEntered()
{
    if (m_previousState != Syncing)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State SYNCING");
#endif
        m_previousState = Syncing;
        emit stateChanged(m_state);
    }
}

void StatusBase::fsmSyncingChannelsSyncedEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event CHANNELS SYNCED");
#endif

    m_state = Up;
}

void StatusBase::fsmSyncingStatusTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event STATUS TRYING");
#endif

    m_state = Trying;
}

void StatusBase::fsmSyncingDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopStatusChannel();
}

void StatusBase::fsmUpEntered()
{
    if (m_previousState != Up)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
        m_previousState = Up;
        emit stateChanged(m_state);
    }
}

void StatusBase::fsmUpStatusTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event STATUS TRYING");
#endif

    m_state = Trying;
}

void StatusBase::fsmUpDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopStatusChannel();
}

void StatusBase::statusChannelStateChanged(application::StatusSubscribe::State state)
{

    if (state == application::StatusSubscribe::Trying)
    {
        if (m_state == Up)
        {
            emit fsmUpStatusTrying();
        }
    }

    if (state == application::StatusSubscribe::Trying)
    {
        if (m_state == Syncing)
        {
            emit fsmSyncingStatusTrying();
        }
    }

    if (state == application::StatusSubscribe::Up)
    {
        if (m_state == Trying)
        {
            emit fsmTryingStatusUp();
        }
    }
}

/** start trigger */
void StatusBase::start()
{
    emit startSignal(QPrivateSignal());
}

/** start queued trigger function */
void StatusBase::startSlot()
{
    if (m_state == Down) {
        emit fsmDownConnect();
    }
}

/** stop trigger */
void StatusBase::stop()
{
    emit stopSignal(QPrivateSignal());
}

/** stop queued trigger function */
void StatusBase::stopSlot()
{
    if (m_state == Trying) {
        emit fsmTryingDisconnect();
    }
    if (m_state == Up) {
        emit fsmUpDisconnect();
    }
}

/** channels synced trigger */
void StatusBase::channelsSynced()
{
    emit channelsSyncedSignal(QPrivateSignal());
}

/** channels synced queued trigger function */
void StatusBase::channelsSyncedSlot()
{
    if (m_state == Syncing) {
        emit fsmSyncingChannelsSynced();
    }
}
}; // namespace application
