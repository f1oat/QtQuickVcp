/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#include "previewclientbase.h"
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace pathview {

/** Generic Preview Client Base implementation */
PreviewClientBase::PreviewClientBase(QObject *parent) :
    QObject(parent),
    QQmlParserStatus(),
    m_componentCompleted(false),
    m_ready(false),
    m_debugName("Preview Client Base"),
    m_previewChannel(nullptr),
    m_previewstatusChannel(nullptr),
    m_state(Down),
    m_previousState(Down),
    m_fsm(nullptr),
    m_errorString("")
{
    // initialize preview channel
    m_previewChannel = new pathview::PreviewSubscribe(this);
    m_previewChannel->setDebugName(m_debugName + " - preview");
    connect(m_previewChannel, &pathview::PreviewSubscribe::socketUriChanged,
            this, &PreviewClientBase::previewUriChanged);
    connect(m_previewChannel, &pathview::PreviewSubscribe::stateChanged,
            this, &PreviewClientBase::previewChannelStateChanged);
    connect(m_previewChannel, &pathview::PreviewSubscribe::socketMessageReceived,
            this, &PreviewClientBase::processPreviewChannelMessage);
    // initialize previewstatus channel
    m_previewstatusChannel = new pathview::PreviewSubscribe(this);
    m_previewstatusChannel->setDebugName(m_debugName + " - previewstatus");
    connect(m_previewstatusChannel, &pathview::PreviewSubscribe::socketUriChanged,
            this, &PreviewClientBase::previewstatusUriChanged);
    connect(m_previewstatusChannel, &pathview::PreviewSubscribe::stateChanged,
            this, &PreviewClientBase::previewstatusChannelStateChanged);
    connect(m_previewstatusChannel, &pathview::PreviewSubscribe::socketMessageReceived,
            this, &PreviewClientBase::processPreviewstatusChannelMessage);

    m_fsm = new QStateMachine(this);
    QState *downState = new QState(m_fsm);
    connect(downState, &QState::entered, this, &PreviewClientBase::fsmDownEntered, Qt::QueuedConnection);
    QState *tryingState = new QState(m_fsm);
    connect(tryingState, &QState::entered, this, &PreviewClientBase::fsmTryingEntered, Qt::QueuedConnection);
    QState *previewtryingState = new QState(m_fsm);
    connect(previewtryingState, &QState::entered, this, &PreviewClientBase::fsmPreviewtryingEntered, Qt::QueuedConnection);
    QState *statustryingState = new QState(m_fsm);
    connect(statustryingState, &QState::entered, this, &PreviewClientBase::fsmStatustryingEntered, Qt::QueuedConnection);
    QState *upState = new QState(m_fsm);
    connect(upState, &QState::entered, this, &PreviewClientBase::fsmUpEntered, Qt::QueuedConnection);
    connect(upState, &QState::entered, this, &PreviewClientBase::setConnected, Qt::QueuedConnection);
    connect(upState, &QState::exited, this, &PreviewClientBase::clearConnected, Qt::QueuedConnection);
    m_fsm->setInitialState(downState);
    m_fsm->start();

    connect(this, &PreviewClientBase::fsmDownConnect,
            this, &PreviewClientBase::fsmDownConnectQueued, Qt::QueuedConnection);
    downState->addTransition(this, &PreviewClientBase::fsmDownConnectQueued, tryingState);
    connect(this, &PreviewClientBase::fsmTryingStatusUp,
            this, &PreviewClientBase::fsmTryingStatusUpQueued, Qt::QueuedConnection);
    tryingState->addTransition(this, &PreviewClientBase::fsmTryingStatusUpQueued, previewtryingState);
    connect(this, &PreviewClientBase::fsmTryingPreviewUp,
            this, &PreviewClientBase::fsmTryingPreviewUpQueued, Qt::QueuedConnection);
    tryingState->addTransition(this, &PreviewClientBase::fsmTryingPreviewUpQueued, statustryingState);
    connect(this, &PreviewClientBase::fsmTryingDisconnect,
            this, &PreviewClientBase::fsmTryingDisconnectQueued, Qt::QueuedConnection);
    tryingState->addTransition(this, &PreviewClientBase::fsmTryingDisconnectQueued, downState);
    connect(this, &PreviewClientBase::fsmPreviewtryingPreviewUp,
            this, &PreviewClientBase::fsmPreviewtryingPreviewUpQueued, Qt::QueuedConnection);
    previewtryingState->addTransition(this, &PreviewClientBase::fsmPreviewtryingPreviewUpQueued, upState);
    connect(this, &PreviewClientBase::fsmPreviewtryingStatusTrying,
            this, &PreviewClientBase::fsmPreviewtryingStatusTryingQueued, Qt::QueuedConnection);
    previewtryingState->addTransition(this, &PreviewClientBase::fsmPreviewtryingStatusTryingQueued, tryingState);
    connect(this, &PreviewClientBase::fsmPreviewtryingDisconnect,
            this, &PreviewClientBase::fsmPreviewtryingDisconnectQueued, Qt::QueuedConnection);
    previewtryingState->addTransition(this, &PreviewClientBase::fsmPreviewtryingDisconnectQueued, downState);
    connect(this, &PreviewClientBase::fsmStatustryingStatusUp,
            this, &PreviewClientBase::fsmStatustryingStatusUpQueued, Qt::QueuedConnection);
    statustryingState->addTransition(this, &PreviewClientBase::fsmStatustryingStatusUpQueued, upState);
    connect(this, &PreviewClientBase::fsmStatustryingPreviewTrying,
            this, &PreviewClientBase::fsmStatustryingPreviewTryingQueued, Qt::QueuedConnection);
    statustryingState->addTransition(this, &PreviewClientBase::fsmStatustryingPreviewTryingQueued, tryingState);
    connect(this, &PreviewClientBase::fsmStatustryingDisconnect,
            this, &PreviewClientBase::fsmStatustryingDisconnectQueued, Qt::QueuedConnection);
    statustryingState->addTransition(this, &PreviewClientBase::fsmStatustryingDisconnectQueued, downState);
    connect(this, &PreviewClientBase::fsmUpPreviewTrying,
            this, &PreviewClientBase::fsmUpPreviewTryingQueued, Qt::QueuedConnection);
    upState->addTransition(this, &PreviewClientBase::fsmUpPreviewTryingQueued, previewtryingState);
    connect(this, &PreviewClientBase::fsmUpStatusTrying,
            this, &PreviewClientBase::fsmUpStatusTryingQueued, Qt::QueuedConnection);
    upState->addTransition(this, &PreviewClientBase::fsmUpStatusTryingQueued, statustryingState);
    connect(this, &PreviewClientBase::fsmUpDisconnect,
            this, &PreviewClientBase::fsmUpDisconnectQueued, Qt::QueuedConnection);
    upState->addTransition(this, &PreviewClientBase::fsmUpDisconnectQueued, downState);

    connect(this, &PreviewClientBase::fsmDownConnect,
            this, &PreviewClientBase::fsmDownConnectEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmTryingStatusUp,
            this, &PreviewClientBase::fsmTryingStatusUpEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmTryingPreviewUp,
            this, &PreviewClientBase::fsmTryingPreviewUpEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmTryingDisconnect,
            this, &PreviewClientBase::fsmTryingDisconnectEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmPreviewtryingPreviewUp,
            this, &PreviewClientBase::fsmPreviewtryingPreviewUpEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmPreviewtryingStatusTrying,
            this, &PreviewClientBase::fsmPreviewtryingStatusTryingEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmPreviewtryingDisconnect,
            this, &PreviewClientBase::fsmPreviewtryingDisconnectEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmStatustryingStatusUp,
            this, &PreviewClientBase::fsmStatustryingStatusUpEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmStatustryingPreviewTrying,
            this, &PreviewClientBase::fsmStatustryingPreviewTryingEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmStatustryingDisconnect,
            this, &PreviewClientBase::fsmStatustryingDisconnectEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmUpPreviewTrying,
            this, &PreviewClientBase::fsmUpPreviewTryingEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmUpStatusTrying,
            this, &PreviewClientBase::fsmUpStatusTryingEvent, Qt::QueuedConnection);
    connect(this, &PreviewClientBase::fsmUpDisconnect,
            this, &PreviewClientBase::fsmUpDisconnectEvent, Qt::QueuedConnection);

     connect(this, &PreviewClientBase::startSignal,
             this, &PreviewClientBase::startSlot, Qt::QueuedConnection);
     connect(this, &PreviewClientBase::stopSignal,
             this, &PreviewClientBase::stopSlot, Qt::QueuedConnection);
}

PreviewClientBase::~PreviewClientBase()
{
}

/** Add a topic that should be subscribed **/
void PreviewClientBase::addPreviewTopic(const QString &name)
{
    m_previewChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void PreviewClientBase::removePreviewTopic(const QString &name)
{
    m_previewChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void PreviewClientBase::clearPreviewTopics()
{
    m_previewChannel->clearSocketTopics();
}

/** Add a topic that should be subscribed **/
void PreviewClientBase::addPreviewstatusTopic(const QString &name)
{
    m_previewstatusChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void PreviewClientBase::removePreviewstatusTopic(const QString &name)
{
    m_previewstatusChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void PreviewClientBase::clearPreviewstatusTopics()
{
    m_previewstatusChannel->clearSocketTopics();
}

void PreviewClientBase::startPreviewChannel()
{
    m_previewChannel->setReady(true);
}

void PreviewClientBase::stopPreviewChannel()
{
    m_previewChannel->setReady(false);
}

void PreviewClientBase::startPreviewstatusChannel()
{
    m_previewstatusChannel->setReady(true);
}

void PreviewClientBase::stopPreviewstatusChannel()
{
    m_previewstatusChannel->setReady(false);
}

/** Processes all message received on preview */
void PreviewClientBase::processPreviewChannelMessage(const QByteArray &topic, const pb::Container &rx)
{

    // react to preview message
    if (rx.type() == pb::MT_PREVIEW)
    {
        previewReceived(topic, rx);
    }

    emit previewMessageReceived(topic, rx);
}

/** Processes all message received on previewstatus */
void PreviewClientBase::processPreviewstatusChannelMessage(const QByteArray &topic, const pb::Container &rx)
{

    // react to interp stat message
    if (rx.type() == pb::MT_INTERP_STAT)
    {
        interpStatReceived(topic, rx);
    }

    emit previewstatusMessageReceived(topic, rx);
}

void PreviewClientBase::fsmDownEntered()
{
    if (m_previousState != Down)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
        m_previousState = Down;
        emit stateChanged(m_state);
    }
}

void PreviewClientBase::fsmDownConnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif

    m_state = Trying;
    startPreviewChannel();
    startPreviewstatusChannel();
}

void PreviewClientBase::fsmTryingEntered()
{
    if (m_previousState != Trying)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
        m_previousState = Trying;
        emit stateChanged(m_state);
    }
}

void PreviewClientBase::fsmTryingStatusUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event STATUS UP");
#endif

    m_state = Previewtrying;
}

void PreviewClientBase::fsmTryingPreviewUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PREVIEW UP");
#endif

    m_state = Statustrying;
}

void PreviewClientBase::fsmTryingDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopPreviewChannel();
    stopPreviewstatusChannel();
}

void PreviewClientBase::fsmPreviewtryingEntered()
{
    if (m_previousState != Previewtrying)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State PREVIEWTRYING");
#endif
        m_previousState = Previewtrying;
        emit stateChanged(m_state);
    }
}

void PreviewClientBase::fsmPreviewtryingPreviewUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PREVIEW UP");
#endif

    m_state = Up;
}

void PreviewClientBase::fsmPreviewtryingStatusTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event STATUS TRYING");
#endif

    m_state = Trying;
}

void PreviewClientBase::fsmPreviewtryingDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopPreviewChannel();
    stopPreviewstatusChannel();
}

void PreviewClientBase::fsmStatustryingEntered()
{
    if (m_previousState != Statustrying)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State STATUSTRYING");
#endif
        m_previousState = Statustrying;
        emit stateChanged(m_state);
    }
}

void PreviewClientBase::fsmStatustryingStatusUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event STATUS UP");
#endif

    m_state = Up;
}

void PreviewClientBase::fsmStatustryingPreviewTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PREVIEW TRYING");
#endif

    m_state = Trying;
}

void PreviewClientBase::fsmStatustryingDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopPreviewChannel();
    stopPreviewstatusChannel();
}

void PreviewClientBase::fsmUpEntered()
{
    if (m_previousState != Up)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
        m_previousState = Up;
        emit stateChanged(m_state);
    }
}

void PreviewClientBase::fsmUpPreviewTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PREVIEW TRYING");
#endif

    m_state = Previewtrying;
}

void PreviewClientBase::fsmUpStatusTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event STATUS TRYING");
#endif

    m_state = Statustrying;
}

void PreviewClientBase::fsmUpDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopPreviewChannel();
    stopPreviewstatusChannel();
}

void PreviewClientBase::previewChannelStateChanged(pathview::PreviewSubscribe::State state)
{

    if (state == pathview::PreviewSubscribe::Trying)
    {
        if (m_state == Up)
        {
            emit fsmUpPreviewTrying();
        }
        if (m_state == Statustrying)
        {
            emit fsmStatustryingPreviewTrying();
        }
    }

    if (state == pathview::PreviewSubscribe::Up)
    {
        if (m_state == Trying)
        {
            emit fsmTryingPreviewUp();
        }
        if (m_state == Previewtrying)
        {
            emit fsmPreviewtryingPreviewUp();
        }
    }
}

void PreviewClientBase::previewstatusChannelStateChanged(pathview::PreviewSubscribe::State state)
{

    if (state == pathview::PreviewSubscribe::Trying)
    {
        if (m_state == Up)
        {
            emit fsmUpStatusTrying();
        }
        if (m_state == Previewtrying)
        {
            emit fsmPreviewtryingStatusTrying();
        }
    }

    if (state == pathview::PreviewSubscribe::Up)
    {
        if (m_state == Trying)
        {
            emit fsmTryingStatusUp();
        }
        if (m_state == Statustrying)
        {
            emit fsmStatustryingStatusUp();
        }
    }
}

/** start trigger */
void PreviewClientBase::start()
{
    emit startSignal(QPrivateSignal());
}

/** start queued trigger function */
void PreviewClientBase::startSlot()
{
    if (m_state == Down) {
        emit fsmDownConnect();
    }
}

/** stop trigger */
void PreviewClientBase::stop()
{
    emit stopSignal(QPrivateSignal());
}

/** stop queued trigger function */
void PreviewClientBase::stopSlot()
{
    if (m_state == Trying) {
        emit fsmTryingDisconnect();
    }
    if (m_state == Up) {
        emit fsmUpDisconnect();
    }
}
}; // namespace pathview
