/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#include "paramclient.h"
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace param {

/** Generic Param Client implementation */
ParamClient::ParamClient(QObject *parent) :
    QObject(parent),
    QQmlParserStatus(),
    m_componentCompleted(false),
    m_ready(false),
    m_debugName("Param Client"),
    m_paramcmdChannel(nullptr),
    m_paramChannel(nullptr),
    m_state(Down),
    m_previousState(Down),
    m_fsm(nullptr),
    m_errorString("")
{
    // initialize paramcmd channel
    m_paramcmdChannel = new machinetalk::RpcClient(this);
    m_paramcmdChannel->setDebugName(m_debugName + " - paramcmd");
    connect(m_paramcmdChannel, &machinetalk::RpcClient::socketUriChanged,
            this, &ParamClient::paramcmdUriChanged);
    connect(m_paramcmdChannel, &machinetalk::RpcClient::stateChanged,
            this, &ParamClient::paramcmdChannelStateChanged);
    // initialize param channel
    m_paramChannel = new machinetalk::Subscribe(this);
    m_paramChannel->setDebugName(m_debugName + " - param");
    connect(m_paramChannel, &machinetalk::Subscribe::socketUriChanged,
            this, &ParamClient::paramUriChanged);
    connect(m_paramChannel, &machinetalk::Subscribe::stateChanged,
            this, &ParamClient::paramChannelStateChanged);
    connect(m_paramChannel, &machinetalk::Subscribe::socketMessageReceived,
            this, &ParamClient::processParamChannelMessage);

    connect(m_paramcmdChannel, &machinetalk::RpcClient::heartbeatIntervalChanged,
            this, &ParamClient::paramcmdHeartbeatIntervalChanged);

    connect(m_paramChannel, &machinetalk::Subscribe::heartbeatIntervalChanged,
            this, &ParamClient::paramHeartbeatIntervalChanged);

    m_fsm = new QStateMachine(this);
    QState *downState = new QState(m_fsm);
    connect(downState, &QState::entered, this, &ParamClient::fsmDownEntered, Qt::QueuedConnection);
    QState *connectingState = new QState(m_fsm);
    connect(connectingState, &QState::entered, this, &ParamClient::fsmConnectingEntered, Qt::QueuedConnection);
    QState *syncingState = new QState(m_fsm);
    connect(syncingState, &QState::entered, this, &ParamClient::fsmSyncingEntered, Qt::QueuedConnection);
    QState *tryingState = new QState(m_fsm);
    connect(tryingState, &QState::entered, this, &ParamClient::fsmTryingEntered, Qt::QueuedConnection);
    QState *upState = new QState(m_fsm);
    connect(upState, &QState::entered, this, &ParamClient::fsmUpEntered, Qt::QueuedConnection);
    connect(upState, &QState::entered, this, &ParamClient::setSynced, Qt::QueuedConnection);
    connect(upState, &QState::exited, this, &ParamClient::clearSynced, Qt::QueuedConnection);
    connect(upState, &QState::exited, this, &ParamClient::unsyncKeys, Qt::QueuedConnection);
    m_fsm->setInitialState(downState);
    m_fsm->start();

    connect(this, &ParamClient::fsmDownConnect,
            this, &ParamClient::fsmDownConnectQueued, Qt::QueuedConnection);
    downState->addTransition(this, &ParamClient::fsmDownConnectQueued, connectingState);
    connect(this, &ParamClient::fsmConnectingParamcmdUp,
            this, &ParamClient::fsmConnectingParamcmdUpQueued, Qt::QueuedConnection);
    connectingState->addTransition(this, &ParamClient::fsmConnectingParamcmdUpQueued, syncingState);
    connect(this, &ParamClient::fsmConnectingParamUp,
            this, &ParamClient::fsmConnectingParamUpQueued, Qt::QueuedConnection);
    connectingState->addTransition(this, &ParamClient::fsmConnectingParamUpQueued, tryingState);
    connect(this, &ParamClient::fsmConnectingDisconnect,
            this, &ParamClient::fsmConnectingDisconnectQueued, Qt::QueuedConnection);
    connectingState->addTransition(this, &ParamClient::fsmConnectingDisconnectQueued, downState);
    connect(this, &ParamClient::fsmSyncingParamUp,
            this, &ParamClient::fsmSyncingParamUpQueued, Qt::QueuedConnection);
    syncingState->addTransition(this, &ParamClient::fsmSyncingParamUpQueued, upState);
    connect(this, &ParamClient::fsmSyncingParamcmdTrying,
            this, &ParamClient::fsmSyncingParamcmdTryingQueued, Qt::QueuedConnection);
    syncingState->addTransition(this, &ParamClient::fsmSyncingParamcmdTryingQueued, connectingState);
    connect(this, &ParamClient::fsmSyncingDisconnect,
            this, &ParamClient::fsmSyncingDisconnectQueued, Qt::QueuedConnection);
    syncingState->addTransition(this, &ParamClient::fsmSyncingDisconnectQueued, downState);
    connect(this, &ParamClient::fsmTryingParamcmdUp,
            this, &ParamClient::fsmTryingParamcmdUpQueued, Qt::QueuedConnection);
    tryingState->addTransition(this, &ParamClient::fsmTryingParamcmdUpQueued, upState);
    connect(this, &ParamClient::fsmTryingParamTrying,
            this, &ParamClient::fsmTryingParamTryingQueued, Qt::QueuedConnection);
    tryingState->addTransition(this, &ParamClient::fsmTryingParamTryingQueued, connectingState);
    connect(this, &ParamClient::fsmTryingDisconnect,
            this, &ParamClient::fsmTryingDisconnectQueued, Qt::QueuedConnection);
    tryingState->addTransition(this, &ParamClient::fsmTryingDisconnectQueued, downState);
    connect(this, &ParamClient::fsmUpParamcmdTrying,
            this, &ParamClient::fsmUpParamcmdTryingQueued, Qt::QueuedConnection);
    upState->addTransition(this, &ParamClient::fsmUpParamcmdTryingQueued, tryingState);
    connect(this, &ParamClient::fsmUpParamTrying,
            this, &ParamClient::fsmUpParamTryingQueued, Qt::QueuedConnection);
    upState->addTransition(this, &ParamClient::fsmUpParamTryingQueued, syncingState);
    connect(this, &ParamClient::fsmUpDisconnect,
            this, &ParamClient::fsmUpDisconnectQueued, Qt::QueuedConnection);
    upState->addTransition(this, &ParamClient::fsmUpDisconnectQueued, downState);

    connect(this, &ParamClient::fsmDownConnect,
            this, &ParamClient::fsmDownConnectEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmConnectingParamcmdUp,
            this, &ParamClient::fsmConnectingParamcmdUpEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmConnectingParamUp,
            this, &ParamClient::fsmConnectingParamUpEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmConnectingDisconnect,
            this, &ParamClient::fsmConnectingDisconnectEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmSyncingParamUp,
            this, &ParamClient::fsmSyncingParamUpEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmSyncingParamcmdTrying,
            this, &ParamClient::fsmSyncingParamcmdTryingEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmSyncingDisconnect,
            this, &ParamClient::fsmSyncingDisconnectEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmTryingParamcmdUp,
            this, &ParamClient::fsmTryingParamcmdUpEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmTryingParamTrying,
            this, &ParamClient::fsmTryingParamTryingEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmTryingDisconnect,
            this, &ParamClient::fsmTryingDisconnectEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmUpParamcmdTrying,
            this, &ParamClient::fsmUpParamcmdTryingEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmUpParamTrying,
            this, &ParamClient::fsmUpParamTryingEvent, Qt::QueuedConnection);
    connect(this, &ParamClient::fsmUpDisconnect,
            this, &ParamClient::fsmUpDisconnectEvent, Qt::QueuedConnection);
}

ParamClient::~ParamClient()
{
}

/** Add a topic that should be subscribed **/
void ParamClient::addParamTopic(const QString &name)
{
    m_paramChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void ParamClient::removeParamTopic(const QString &name)
{
    m_paramChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void ParamClient::clearParamTopics()
{
    m_paramChannel->clearSocketTopics();
}

void ParamClient::startParamcmdChannel()
{
    m_paramcmdChannel->setReady(true);
}

void ParamClient::stopParamcmdChannel()
{
    m_paramcmdChannel->setReady(false);
}

void ParamClient::startParamChannel()
{
    m_paramChannel->setReady(true);
}

void ParamClient::stopParamChannel()
{
    m_paramChannel->setReady(false);
}

/** Processes all message received on param */
void ParamClient::processParamChannelMessage(const QByteArray &topic, const pb::Container &rx)
{

    // react to full update message
    if (rx.type() == pb::MT_FULL_UPDATE)
    {
        fullUpdateReceived(topic, rx);
    }

    // react to incremental update message
    if (rx.type() == pb::MT_INCREMENTAL_UPDATE)
    {
        incrementalUpdateReceived(topic, rx);
    }

    emit paramMessageReceived(topic, rx);
}

void ParamClient::sendParamcmdMessage(pb::ContainerType type, pb::Container *tx)
{
    m_paramcmdChannel->sendSocketMessage(type, tx);
}

void ParamClient::sendIncrementalUpdate(pb::Container *tx)
{
    sendParamcmdMessage(pb::MT_INCREMENTAL_UPDATE, tx);
}

void ParamClient::fsmDownEntered()
{
    if (m_previousState != Down)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
        m_previousState = Down;
        emit stateChanged(m_state);
    }
}

void ParamClient::fsmDownConnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif

    m_state = Connecting;
    startParamcmdChannel();
    startParamChannel();
}

void ParamClient::fsmConnectingEntered()
{
    if (m_previousState != Connecting)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State CONNECTING");
#endif
        m_previousState = Connecting;
        emit stateChanged(m_state);
    }
}

void ParamClient::fsmConnectingParamcmdUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PARAMCMD UP");
#endif

    m_state = Syncing;
}

void ParamClient::fsmConnectingParamUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PARAM UP");
#endif

    m_state = Trying;
}

void ParamClient::fsmConnectingDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopParamcmdChannel();
    stopParamChannel();
    removeKeys();
}

void ParamClient::fsmSyncingEntered()
{
    if (m_previousState != Syncing)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State SYNCING");
#endif
        m_previousState = Syncing;
        emit stateChanged(m_state);
    }
}

void ParamClient::fsmSyncingParamUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PARAM UP");
#endif

    m_state = Up;
}

void ParamClient::fsmSyncingParamcmdTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PARAMCMD TRYING");
#endif

    m_state = Connecting;
}

void ParamClient::fsmSyncingDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopParamcmdChannel();
    stopParamChannel();
    removeKeys();
}

void ParamClient::fsmTryingEntered()
{
    if (m_previousState != Trying)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
        m_previousState = Trying;
        emit stateChanged(m_state);
    }
}

void ParamClient::fsmTryingParamcmdUpEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PARAMCMD UP");
#endif

    m_state = Up;
}

void ParamClient::fsmTryingParamTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PARAM TRYING");
#endif

    m_state = Connecting;
}

void ParamClient::fsmTryingDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopParamcmdChannel();
    stopParamChannel();
    removeKeys();
}

void ParamClient::fsmUpEntered()
{
    if (m_previousState != Up)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
        m_previousState = Up;
        emit stateChanged(m_state);
    }
}

void ParamClient::fsmUpParamcmdTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PARAMCMD TRYING");
#endif

    m_state = Trying;
}

void ParamClient::fsmUpParamTryingEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event PARAM TRYING");
#endif

    m_state = Syncing;
}

void ParamClient::fsmUpDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopParamcmdChannel();
    stopParamChannel();
    removeKeys();
}

void ParamClient::paramcmdChannelStateChanged(machinetalk::RpcClient::State state)
{

    if (state == machinetalk::RpcClient::Trying)
    {
        if (m_state == Syncing)
        {
            emit fsmSyncingParamcmdTrying();
        }
        if (m_state == Up)
        {
            emit fsmUpParamcmdTrying();
        }
    }

    if (state == machinetalk::RpcClient::Up)
    {
        if (m_state == Trying)
        {
            emit fsmTryingParamcmdUp();
        }
        if (m_state == Connecting)
        {
            emit fsmConnectingParamcmdUp();
        }
    }
}

void ParamClient::paramChannelStateChanged(machinetalk::Subscribe::State state)
{

    if (state == machinetalk::Subscribe::Trying)
    {
        if (m_state == Trying)
        {
            emit fsmTryingParamTrying();
        }
        if (m_state == Up)
        {
            emit fsmUpParamTrying();
        }
    }

    if (state == machinetalk::Subscribe::Up)
    {
        if (m_state == Syncing)
        {
            emit fsmSyncingParamUp();
        }
        if (m_state == Connecting)
        {
            emit fsmConnectingParamUp();
        }
    }
}

/** start trigger */
void ParamClient::start()
{
    if (m_state == Down) {
        emit fsmDownConnect();
    }
}

/** stop trigger */
void ParamClient::stop()
{
    if (m_state == Connecting) {
        emit fsmConnectingDisconnect();
    }
    if (m_state == Syncing) {
        emit fsmSyncingDisconnect();
    }
    if (m_state == Trying) {
        emit fsmTryingDisconnect();
    }
    if (m_state == Up) {
        emit fsmUpDisconnect();
    }
}
}; // namespace param
