/****************************************************************************
**
** This code was generated by a code generator based on imatix/gsl
** Any changes in this code will be lost.
**
****************************************************************************/
#include "paramserver.h"
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace param {

/** Generic Param Server implementation */
ParamServer::ParamServer(QObject *parent) :
    QObject(parent),
    QQmlParserStatus(),
    m_componentCompleted(false),
    m_ready(false),
    m_debugName("Param Server"),
    m_paramcmdChannel(nullptr),
    m_paramChannel(nullptr),
    m_state(Down),
    m_previousState(Down),
    m_fsm(nullptr),
    m_errorString("")
{
    // initialize paramcmd channel
    m_paramcmdChannel = new machinetalk::RpcService(this);
    m_paramcmdChannel->setDebugName(m_debugName + " - paramcmd");
    connect(m_paramcmdChannel, &machinetalk::RpcService::socketUriChanged,
            this, &ParamServer::paramcmdUriChanged);
    connect(m_paramcmdChannel, &machinetalk::RpcService::socketMessageReceived,
            this, &ParamServer::processParamcmdChannelMessage, Qt::QueuedConnection);
    // initialize param channel
    m_paramChannel = new machinetalk::Publish(this);
    m_paramChannel->setDebugName(m_debugName + " - param");
    connect(m_paramChannel, &machinetalk::Publish::socketUriChanged,
            this, &ParamServer::paramUriChanged);

    connect(m_paramChannel, &machinetalk::Publish::heartbeatIntervalChanged,
            this, &ParamServer::paramHeartbeatIntervalChanged);

    m_fsm = new QStateMachine(this);
    QState *downState = new QState(m_fsm);
    connect(downState, &QState::entered, this, &ParamServer::fsmDownEntered, Qt::QueuedConnection);
    QState *upState = new QState(m_fsm);
    connect(upState, &QState::entered, this, &ParamServer::fsmUpEntered, Qt::QueuedConnection);
    m_fsm->setInitialState(downState);
    m_fsm->start();

    connect(this, &ParamServer::fsmDownConnect,
            this, &ParamServer::fsmDownConnectQueued, Qt::QueuedConnection);
    downState->addTransition(this, &ParamServer::fsmDownConnectQueued, upState);
    connect(this, &ParamServer::fsmUpDisconnect,
            this, &ParamServer::fsmUpDisconnectQueued, Qt::QueuedConnection);
    upState->addTransition(this, &ParamServer::fsmUpDisconnectQueued, downState);

    connect(this, &ParamServer::fsmDownConnect,
            this, &ParamServer::fsmDownConnectEvent, Qt::QueuedConnection);
    connect(this, &ParamServer::fsmUpDisconnect,
            this, &ParamServer::fsmUpDisconnectEvent, Qt::QueuedConnection);
}

ParamServer::~ParamServer()
{
}

void ParamServer::startParamcmdChannel()
{
    m_paramcmdChannel->setReady(true);
}

void ParamServer::stopParamcmdChannel()
{
    m_paramcmdChannel->setReady(false);
}

void ParamServer::startParamChannel()
{
    m_paramChannel->setReady(true);
}

void ParamServer::stopParamChannel()
{
    m_paramChannel->setReady(false);
}

/** Processes all message received on paramcmd */
void ParamServer::processParamcmdChannelMessage(pb::Container *rx)
{

    // react to incremental update message
    if (rx->type() == pb::MT_INCREMENTAL_UPDATE)
    {
        incrementalUpdateReceived(rx);
    }

    emit paramcmdMessageReceived(rx);
}

void ParamServer::sendParamMessage(pb::ContainerType type, pb::Container *tx)
{
    m_paramChannel->sendSocketMessage(type, tx);
}

void ParamServer::sendFullUpdate(pb::Container *tx)
{
    sendParamMessage(pb::MT_FULL_UPDATE, tx);
}

void ParamServer::sendIncrementalUpdate(pb::Container *tx)
{
    sendParamMessage(pb::MT_INCREMENTAL_UPDATE, tx);
}

void ParamServer::fsmDownEntered()
{
    if (m_previousState != Down)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
        m_previousState = Down;
        emit stateChanged(m_state);
    }
}

void ParamServer::fsmDownConnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif

    m_state = Up;
    startParamcmdChannel();
    startParamChannel();
}

void ParamServer::fsmUpEntered()
{
    if (m_previousState != Up)
    {
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
        m_previousState = Up;
        emit stateChanged(m_state);
    }
}

void ParamServer::fsmUpDisconnectEvent()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif

    m_state = Down;
    stopParamcmdChannel();
    stopParamChannel();
}
}; // namespace param
